# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_VERSION: 'latest'

stages:
  - stage: setup
    jobs:
      - job: 
        continueOnError: false
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
          - script: |
              python -m pip install --upgrade pip
              pip install awscli
          - script: |
              aws_access_key_id=$(az keyvault secret show --vault-name azpipelinevault --name "AWSAccessKeyId" --query "value" -o tsv)
              aws_secret_access_key=$(az keyvault secret show --vault-name azpipelinevault --name "AWSSecretAccessKey" --query "value" -o tsv)
              aws configure set aws_access_key_id $aws_access_key_id
              aws configure set aws_secret_access_key $aws_secret_access_key
          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: 'latest'
          - task: DownloadSecureFile@1
            name: azServicePrincipal
            inputs:
              secureFile: 'azure-sp.json'  # Replace with the name of your service principal file
          - task: AzureCLI@2
            inputs:
              azureSubscription: AzurePipelineServiceConnection  # Replace with your Azure subscription
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az login --service-principal -u $(azServicePrincipal) -p $(azServicePrincipal) --tenant $(tenantID)
          
          - script: |
              terraform init
            displayName: 'Terraform init'

          - script: |
              terraform validate
            displayName: 'Terraform validate'

          - script: |
              terraform plan -out=tfplan
            displayName: 'Terraform plan'

          - script: |
              terraform apply -auto-approve tfplan
            displayName: 'Terraform apply'

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: AzurePipelineServiceConnection # Replace with your Azure subscription
              KeyVaultName: 'azpipelinevault'  # Replace with your Key Vault name
              SecretsFilter: '*'
              RunAsPreJob: true

          - script: |
              # Verify resources creation
              terraform output
            displayName: 'Verify Terraform outputs'
