trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_VERSION: 'latest'

stages:
  - stage: setup
    jobs:
      - job: 
        continueOnError: false
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true

          - script: |
              python -m pip install --upgrade pip
              pip install awscli jq
            displayName: 'Install pip and AWS CLI'

          - script: |
              echo "Setting environment variables for Azure authentication..."
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              export AWS_ACCESS_KEY_ID=$(aws_access_key_id)
              export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
            displayName: 'Set Azure authentication variables'

          - script: |
                set -e
                echo "Fetching OIDC token..."
                response=$(curl -s -X POST -H 'Metadata: true' --url 'http://169.254.169.254/metadata/identity/oauth2/token' --data 'api-version=2019-08-01&resource=https%3A%2F%2Fmanagement.azure.com%2F')
                oidc_token=$(echo $response | jq -r .access_token)
                
                if [ -z "$oidc_token" ]; then
                  echo "Failed to fetch OIDC token"
                  exit 1
                else
                  echo "OIDC token fetched successfully"
                fi
                
                # Export the token to be used in subsequent steps
                export OIDC_TOKEN=$oidc_token
                echo $OIDC_TOKEN
            displayName: 'Fetch OIDC Token'

          - script: |
              echo "Using OIDC token to authenticate..."
              az login --service-principal --username $ARM_CLIENT_ID --password $OIDC_TOKEN --tenant $ARM_TENANT_ID
            displayName: 'Azure Login using OIDC Token'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(TF_VERSION)'

          - script: |
              terraform init
            displayName: 'Terraform init'

          - script: |
              terraform validate
            displayName: 'Terraform validate'

          - script: |
              terraform plan -out=tfplan
            displayName: 'Terraform plan'

          - script: |
              terraform apply -auto-approve tfplan
            displayName: 'Terraform apply'

          - script: |
              # Verify resources creation
              terraform output
            displayName: 'Verify Terraform outputs'
