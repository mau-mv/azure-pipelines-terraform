# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceAWS: 'AWS-Service-Connection'
              backendServiceArm: 'AzurePipelineServiceConnection'
              backendAzureRmResourceGroupName: 'azurepipelinesrg'
              backendAzureRmStorageAccountName: 'maumvmodulestorageacct'
              backendAzureRmContainerName: 'maumvterraformstate'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceAWS: 'AWS-Service-Connection'
              backendServiceArm: 'AzurePipelineServiceConnection'
              backendAzureRmResourceGroupName: 'azurepipelinesrg'
              backendAzureRmStorageAccountName: 'maumvmodulestorageacct'
              backendAzureRmContainerName: 'maumvterraformstate'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV4@4
            displayName: plan azure
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'AzurePipelineServiceConnection'
          - task: TerraformTaskV4@4
            displayName: plan aws
            inputs:
              provider: 'aws'
              command: 'plan'
              environmentServiceNameAWS: 'AWS-Service-Connection'
          - task: TerraformTaskV4@4
            displayName: apply azure
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'AzurePipelineServiceConnection'
          - task: TerraformTaskV4@4
            displayName: apply aws
            inputs:
              provider: 'aws'
              command: 'apply'
              environmentServiceNameAWS: 'AWS-Service-Connection'